# This workflow builds a NixOS installer ISO, extracts the kernel and initrd,
# and then creates a GitHub release with the ISO, kernel, and initrd as assets.
on:
  push:
    branches:
      - main

permissions:
  contents: write    # Allows creating releases and pushing tags

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Nix
        uses: cachix/install-nix-action@v26
        with:
          nix_version: latest

      - name: Build NixOS ISO
        run: |
          nix build .#nixosConfigurations.installer.config.system.build.isoImage
          cp ./result/iso/nixos-*.iso ./nixos-installer.iso

      # --- MODIFIED STEP: Extract kernel, initrd, and boot parameters dynamically ---
      - name: Extract Boot Files and Parameters
        run: |
          echo "Extracting boot files from nixos-installer.iso..."
          sudo mkdir -p /mnt/iso
          sudo mount -o loop ./nixos-installer.iso /mnt/iso

          # Find the kernel and initrd files dynamically instead of using a fixed path
          KERNEL_PATH=$(find /mnt/iso -name 'kernel')
          INITRD_PATH=$(find /mnt/iso -name 'initrd')

          if [ -z "$KERNEL_PATH" ] || [ -z "$INITRD_PATH" ]; then
            echo "Error: Could not find kernel or initrd in the ISO."
            # List directory contents for debugging
            find /mnt/iso
            exit 1
          fi

          echo "Found kernel at: $KERNEL_PATH"
          echo "Found initrd at: $INITRD_PATH"

          # Copy the files to the workspace
          cp "$KERNEL_PATH" ./nixos.vmlinuz
          cp "$INITRD_PATH" ./nixos.initrd

          # --- NEW: Extract the 'init' parameter from the GRUB config ---
          echo "Extracting boot parameters from GRUB config..."
          # Find the grub.cfg file
          GRUB_CFG_PATH=$(find /mnt/iso -name 'grub.cfg')
          if [ -z "$GRUB_CFG_PATH" ]; then
             echo "Warning: Could not find grub.cfg to extract boot parameters."
             # Create an empty placeholder file
             echo "init= parameter not found" > ./boot-params.txt
          else
            # Extract the line with 'linux', then get the 'init=' argument
            grep '^\s*linux' "$GRUB_CFG_PATH" | sed -n 's/.*\(init=[^ ]*\).*/\1/p' > ./boot-params.txt
            echo "Boot parameters extracted to boot-params.txt:"
            cat ./boot-params.txt
          fi

          sudo umount /mnt/iso
          echo "Kernel, initrd, and boot params extracted successfully."
          ls -lh ./nixos.vmlinuz ./nixos.initrd ./boot-params.txt

      - name: Install jq and GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          type -p curl >/dev/null || (sudo apt-get update && sudo apt-get install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt-get update \
          && sudo apt-get install gh -y

      - name: Get latest release version
        id: get_version
        run: |
          set +e # Disable immediate exit on error
          echo "Fetching latest release for ${{ github.repository }}"
          RESPONSE=$(curl -s -w "\n%{http_code}" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest 2>&1)
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          echo "HTTP Status: $HTTP_STATUS"
          if [ "$HTTP_STATUS" -eq 200 ]; then
            LATEST_VERSION=$(echo "$BODY" | jq -r '.tag_name' | sed 's/^v//' | grep -E '^[0-9]+\.[0-9]+$' || echo "")
            if [ -n "$LATEST_VERSION" ]; then
              NEW_VERSION=$(echo "$LATEST_VERSION" | awk -F. '{print $1"."$2+1}')
              echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            else
              echo "No valid version found, defaulting to 1.0"
              echo "version=1.0" >> $GITHUB_OUTPUT
            fi
          else
            echo "No release found or API error (status: $HTTP_STATUS), defaulting to 1.0"
            echo "version=1.0" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      # --- MODIFIED STEP: Create release with ISO, kernel, initrd, and boot-params.txt ---
      - name: Create or update release and manage 'latest' tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Verify all assets exist before proceeding
          ls -la ./nixos-installer.iso ./nixos.vmlinuz ./nixos.initrd ./boot-params.txt
          
          VERSION_TAG="v${{ steps.get_version.outputs.version }}"
          
          echo "Creating new release with tag ${VERSION_TAG}"
          gh release create "${VERSION_TAG}" \
            ./nixos-installer.iso \
            ./nixos.vmlinuz \
            ./nixos.initrd \
            ./boot-params.txt \
            --title "NixOS Installer ${VERSION_TAG}" \
            --notes "Automated release for NixOS installer. See boot-params.txt for the required 'init' kernel parameter."

          echo "Updating the 'latest' release to point to this build..."
          gh release delete latest --yes || echo "No previous 'latest' release to delete."

          gh release create latest \
            ./nixos-installer.iso \
            ./nixos.vmlinuz \
            ./nixos.initrd \
            ./boot-params.txt \
            --title "Latest NixOS Installer (points to ${VERSION_TAG})" \
            --notes "This is the latest automated build. See boot-params.txt for the required 'init' kernel parameter."

      - name: Upload ISO as artifact (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: nixos-installer-iso
          path: ./nixos-installer.iso


name: Build NixOS Installer ISO

on:
  push:
    branches:
      - main

permissions:
  contents: write    # Allows pushing tags, commits, and managing releases

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Nix
        uses: cachix/install-nix-action@v26
        with:
          nix_version: latest

      - name: Build NixOS ISO
        run: |
          nix build .#nixosConfigurations.installer.config.system.build.isoImage
          cp ./result/iso/nixos-*.iso ./nixos-installer.iso

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get latest release version
        id: get_version
        run: |
          set +e  # Disable immediate exit on error
          echo "Fetching latest release for ${{ github.repository }}"
          RESPONSE=$(curl -s -w "\n%{http_code}" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest 2>&1)
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          echo "HTTP Status: $HTTP_STATUS"
          echo "Response Body: $BODY"
          if [ "$HTTP_STATUS" -eq 200 ]; then
            LATEST_VERSION=$(echo "$BODY" | jq -r '.tag_name' | sed 's/^v//' | grep -E '^[0-9]+\.[0-9]+$' || echo "")
            if [ -n "$LATEST_VERSION" ]; then
              NEW_VERSION=$(echo "$LATEST_VERSION" | awk -F. '{print $1"."$2+1}')
              echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
            else
              echo "No valid version found, defaulting to 1.0"
              echo "version=1.0" >> $GITHUB_OUTPUT
            fi
          else
            echo "No release found or API error (status: $HTTP_STATUS), defaulting to 1.0"
            echo "version=1.0" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Create or update release and manage 'latest' tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Debug: Verify ISO file exists
          ls -la ./nixos-installer.iso
          
          # Force delete the 'latest' tag on remote
          git push origin :refs/tags/latest
          
          # Create or overwrite the 'latest' tag locally
          git tag -f latest
          
          # Push the new 'latest' tag
          git push origin latest
          
          # Create a new versioned release
          gh release create v${{ steps.get_version.outputs.version }} \
            ./nixos-installer.iso \
            --title "NixOS Installer v${{ steps.get_version.outputs.version }}" \
            --notes "Automated release for NixOS installer ISO"
          
          # Ensure the 'latest' tag is associated with the release
          if gh release view latest --repo ${{ github.repository }} > /dev/null 2>&1; then
            gh release edit latest \
              --tag latest \
              --title "Latest NixOS Installer" \
              --notes "Points to the latest NixOS installer ISO release"
          else
            gh release create latest \
              ./nixos-installer.iso \
              --tag latest \
              --title "Latest NixOS Installer" \
              --notes "Points to the latest NixOS installer ISO release"
          fi

      - name: Upload ISO as artifact (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: nixos-installer-iso
          path: ./nixos-installer.iso
